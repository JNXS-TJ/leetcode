class Solution {
public:
    bool judge(string query, string pattern){
        int i = 0;
        int j = 0;
        for(j = 0; j < pattern.size(); ){
            char c = pattern[j];
            if(c >= 'A' && c <= 'Z'){
                while(i < query.size()){
                    if(query[i] == c){
                        j++;
                        i++;
                        break;
                    }else if(query[i]>='A' && query[i]<='Z')return false;
                    else i++;
                }
            }else{
                while(i < query.size()){
                    if(query[i]>='A' && query[i] <= 'Z')return false;
                    else if(query[i] == c){
                        j++;
                        i++;
                        break;
                    }else i++;
                }
            }
            if(i == query.size())break;
        }
        if(j == pattern.size()){
            for(; i < query.size(); i++)
                if(query[i] >= 'A' && query[i] <= 'Z')return false;
            return true;
        }
        return false;
    }
    vector<bool> camelMatch(vector<string>& queries, string pattern) {
        vector<bool> ans;
        for(auto query: queries){
            ans.push_back(judge(query, pattern));
        }
        return ans;
    }
};
